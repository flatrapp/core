#%RAML 1.0
title: FlatrApp API
version: v0.1
mediaType: application/json
protocols: [ HTTP ]

traits:
  restricted:
    headers:
      Authorization:
        description: Auth token
        example: |
          Bearer $token

types:
  User:
    type: object
    properties:
      id: integer
      email: string
      firstName: string
      lastName: string
  Registration:
    type: object
    properties:
      email: string
      firstName: string
      lastName: string
      password: string
      code?: string
        type: string
        minLength: 16
        maxLength: 16
  LoginCredentials:
    type: object
    properties:
      email: string
      password: string
  TokenResponse:
    type: object
    properties:
      token: string
      tokenId: string
      validFor: integer
  Error:
    type: object
    properties:
      error:
        type: object
        properties:
          code: string
          message: string
  Turn:
    type: object
    properties:
      userId: integer
      date: datetime-only
      taskId: integer
  Task:
    type: object
    properties:
      id?: integer
      title: string
      frequency:
        type: integer
        description: |
          Number of days between two executions of this task
      completionTime:
        type: integer
        description: |
          Time to be allowed for the task to be completed in hours
      users:
        type: integer[]
        description: |
          All users that will have to complete this task at one point or another
  Info:
    type: object
    properties:
      version:
        type: string
        example: "v0.1"
  Invitation:
    type: object
    properties:
      id?: int
      email: string
      code?: string

/info:
  get:
    description: Get info about the API server
    responses:
      200:
        body:
          type: Info

/invitations:
  get:
    description: Get all invitations the current User has sent
    responses:
      type: Invitation[]
      example: |
        [{
          "id": 1,
          "email": "flatmate@example.com",
          "code": $code
        },{
          "id": 3,
          "email": "landlord@example.com",
          "code": $code
        }]
  post:
    description: |
      Invite a person via email address. An email with invite code is sent to them
    body:
      type: Invitation
      example: |
        {
          "email": "flatmate@example.com"
        }
    responses:
      201:
        headers:
          Location:
            description: URL of the newly created Invitation
        body:
          type: Invitation
      400:
        body:
          type: Error
          example: |
            {
              "error": {
                "code": "bad_request",
                "message": "Bad request"
              }
            }
      400:
  /{invitationId}:
    delete:
      description: Delete/Invalidate this invitation
      responses:
        204:
          description: Invitation was successfully deleted

/tasks:
  get:
    description: |
      List all tasks
      responses:
        200:
          body:
            type: Task[]
            example: |
              [{
                "id": 1,
                "title": "Doing the dishes",
                "frequency": 3,
                "completionTime": 5,
                "users": [
                  1
                ]
              }]
  post:
    description: |
      Add a new task
    body:
      type: Task
      example: |
        {
          "title": "Doing the dishes",
          "frequency": 3,
          "completionTime": 5,
          "users": [
            1
          ]
        }
    responses:
      201:
        headers:
          Location:
            description: URL of the newly created task
        body:
          type: Task
          example: |
            {
              "id": 1,
              "title": "Doing the dishes",
              "frequency": 3,
              "completionTime": 5,
              "users": [
                1
              ]
            }
      400:
        body:
          type: Error
          example: |
            {
              "error": {
                "code": "bad_request",
                "message": "Bad request"
              }
            }
  /{taskId}:
    get:
      description: |
        Get detailed information about a task
      responses:
        200:
          body:
            type: Task
            example: |
              {
                "id": 1,
                "title": "Doing the dishes",
                "frequency": 3,
                "completionTime": 5,
                "users": [
                  1
                ],
                "turns": [{
                  "userId": 1,
                  "date": "2015-07-04T21:00:00"
                }]
              }
        404:
          body:
            type: Error
            example: |
              {
                "error": {
                  "code": "task_not_found",
                  "message": "The task was not found"
                }
              }
    delete:
      description: |
        Delete a task
      responses:
        204:
          description: |
            Task was successfully deleted
        404:
          body:
            type: Error
            example: |
              {
                "error": {
                  "code": "task_not_found",
                  "message": "The task was not found"
                }
              }
    put:
      description: |
        Update a task and return the same one
      body:
        type: Task
        example: |
          {
            "title": "Doing the dishes",
            "frequency": 3,
            "completionTime": 5,
            "users": [
              1
            ]
          }
      responses:
        200:
          headers:
            Location:
              description: URL of the newly created task
          body:
            type: Task
            example: |
              {
                "id": 1,
                "title": "Doing the dishes",
                "frequency": 3,
                "completionTime": 5,
                "users": [
                  1
                ],
                "nextTurn": {
                  "userId": 1,
                  "date": "2015-07-04T21:00:00"
                }
              }
        404:
          body:
            type: Error
            example: |
              {
                "error": {
                  "code": "task_not_found",
                  "message": "The task was not found"
                }
              }

/auth:
  post:
    description: Authenticate yourself
    body:
      type: LoginCredentials
      example: |
        {
          "email": "max@mustermann.de",
          "password": "pa$$w0rd"
        }
    responses:
      200:
        body:
          type: TokenResponse
          example: |
            {
              "token": "$token",
              "tokenId": "$tokenId",
              "validFor": 3600
            }
      400:
        body:
          type: Error
          example: |
            {
              "error": {
                "code": "bad_request",
                "message": "Bad request"
              }
            }
      403:
        body:
          type: Error
          examples:
            email_not_verified: |
              {
                "error": {
                  "code": "email_not_verified",
                  "message": "You have not verified your email address yet."
                }
              }
            credentials_wrong: |
              {
                "error": {
                  "code": "credentials_wrong",
                  "message": "User does not exist or password is wrong"
                }
              }
/secret:
  get:
    is: [ restricted ]
    description: |
      Endpoint which is only available when authenticated (for testing purposes only)
      body:
        text/plain: |
          Welcome!
/test:
  get:
    description: |
      Is an endpoint for testing stuff. May return anything at all but does not require authentication
/users:
  get:
    description: Get all users
    responses:
      200:
        body:
          type: User[]
          example: |
            [{
              "id": 1,
              "firstName": "Daniel",
              "lastName": "Sch√§fer"
            }]
  post:
    description: Register a new user
    body:
      type: Registration
    responses:
      200:
        body:
          type: User
      400:
        body:
          type: Error
          examples:
            invitation_code_invalid: |
              {
                "error": {
                  "code": "invitation_code_invalid",
                  "message": "This is not a valid invitation code."
                }
              }
            not_invited: |
              {
                "error": {
                  "code": "not_invited",
                  "message": "Your email address is not invited."
                }
              }
            bad_request: |
              {
                "error": {
                  "code": "bad_request",
                  "message": "Bad request"
                }
              }
  /{userId}:
    get:
      description: |
        Get the user with this Id
        responses:
          200:
            body:
              type: User
          404:
            body:
              type: Error
              example: |
                {
                  "error": {
                    "code": "user_not_found",
                    "message": "Could not find a user with matching id"
                  }
                }
    delete:
      description: |
        Delete the user with this id
        responses:
          204:
            description: User was successfully deleted
  /current:
    get:
      description: |
        Get the currently logged in user
      is: [ restricted ]
      responses:
        200:
          body:
            type: User
        401:
          body:
            type: Error
            example: |
              {
                "error": {
                  "code": "unauthorized",
                  "message": "You are not authorized to query this information"
                }
              }
